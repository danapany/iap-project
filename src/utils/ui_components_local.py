import streamlit as st

class UIComponentsLocal:
    """UI Ïª¥Ìè¨ÎÑåÌä∏ Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        self.debug_mode = False
    
    def convert_cause_box_to_html(self, text):
        """Ïû•Ïï†ÏõêÏù∏ ÎßàÏª§Î•º HTMLÎ°ú Î≥ÄÌôò"""
        if '[CAUSE_BOX_START]' not in text or '[CAUSE_BOX_END]' not in text:
            return text, False
        
        start_marker = '[CAUSE_BOX_START]'
        end_marker = '[CAUSE_BOX_END]'
        
        start_idx = text.find(start_marker)
        end_idx = text.find(end_marker)
        
        if start_idx == -1 or end_idx == -1:
            return text, False
        
        cause_content = text[start_idx + len(start_marker):end_idx].strip()
        
        import re
        cause_pattern = r'ÏõêÏù∏(\d+):\s*([^\nÏõê]*(?:\n(?!ÏõêÏù∏\d+:)[^\n]*)*)'
        matches = re.findall(cause_pattern, cause_content, re.MULTILINE)
        
        formatted_causes = []
        
        if matches:
            for i, (num, content) in enumerate(matches[:3]):
                clean_content = content.strip()
                if clean_content:
                    clean_content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', clean_content)
                    formatted_causes.append(
                        f'<li style="margin-bottom: 8px; line-height: 1.5;"><strong>ÏõêÏù∏{num}:</strong> {clean_content}</li>'
                    )
        else:
            lines = [line.strip() for line in cause_content.split('\n') if line.strip()]
            
            bullet_lines = []
            for line in lines:
                if line.startswith('‚Ä¢') or line.startswith('-') or line.startswith('*'):
                    content = line[1:].strip()
                    if content:
                        bullet_lines.append(content)
                elif line:
                    bullet_lines.append(line)
                
                if len(bullet_lines) >= 3:
                    break
            
            if not bullet_lines:
                bullet_lines = [cause_content]
            
            for i, content in enumerate(bullet_lines[:3]):
                content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', content)
                formatted_causes.append(
                    f'<li style="margin-bottom: 8px; line-height: 1.5;"><strong>ÏõêÏù∏{i+1}:</strong> {content}</li>'
                )
        
        cause_html = f'<ul style="margin: 0; padding-left: 20px; list-style-type: none;">{"".join(formatted_causes)}</ul>'
        
        html_box = f"""
<div style="background: #e8f5e8; border: 1px solid #10b981; border-radius: 8px; padding: 15px; margin: 15px 0; display: flex; align-items: flex-start; gap: 12px;">
    <div style="background: #10b981; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; flex-shrink: 0; margin-top: 2px;">üìã</div>
    <div style="flex: 1;">
        <h4 style="color: #065f46; margin: 0 0 8px 0; font-size: 16px; font-weight: bold;">Ïû•Ïï†ÏõêÏù∏</h4>
        <div style="color: #065f46; line-height: 1.5; font-size: 14px;">
            {cause_html}
        </div>
    </div>
</div>
"""
        
        result = text[:start_idx] + html_box + text[end_idx + len(end_marker):]
        return result, True

    def convert_repair_box_to_html(self, text):
        """Î≥µÍµ¨Î∞©Î≤ï ÎßàÏª§Î•º HTMLÎ°ú Î≥ÄÌôò"""
        if '[REPAIR_BOX_START]' not in text or '[REPAIR_BOX_END]' not in text:
            return text, False
        
        start_marker = '[REPAIR_BOX_START]'
        end_marker = '[REPAIR_BOX_END]'
        
        start_idx = text.find(start_marker)
        end_idx = text.find(end_marker)
        
        if start_idx == -1 or end_idx == -1:
            return text, False
        
        repair_content = text[start_idx + len(start_marker):end_idx].strip()
        repair_content = repair_content.replace('**', '<strong>').replace('**', '</strong>')
        
        html_box = f"""
<div style="background: #e8f5e8; border: 1px solid #10b981; border-radius: 8px; padding: 15px; margin: 15px 0; display: flex; align-items: flex-start; gap: 12px;">
    <div style="background: #10b981; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; flex-shrink: 0; margin-top: 2px;">ü§ñ</div>
    <div style="flex: 1;">
        <h4 style="color: #065f46; margin: 0 0 8px 0; font-size: 16px; font-weight: bold;">Î≥µÍµ¨Î∞©Î≤ï (incident_repair Í∏∞Ï§Ä)</h4>
        <div style="color: #065f46; line-height: 1.5; font-size: 14px;">
            {repair_content}
        </div>
    </div>
</div>
"""
        
        result = text[:start_idx] + html_box + text[end_idx + len(end_marker):]
        return result, True
    
    def render_main_ui(self):
        """Î©îÏù∏ UI Î†åÎçîÎßÅ - Ï¢åÏ∏°Ï†ïÎ†¨Î°ú ÏàòÏ†ï"""
        html_code = """
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                background: #f0f8ff;
                font-family: 'Arial', sans-serif;
                padding: 20px;
            }
            
            .web-search-container {
                background: linear-gradient(180deg, #e6f3ff 0%, #b3d9ff 100%);
                padding: 60px 40px;
                border-radius: 25px;
                margin: 20px 0;
                position: relative;
                min-height: 350px;
                overflow: hidden;
                max-width: 1000px;
                margin: 20px 0; /* Ï¢åÏ∏° Ï†ïÎ†¨ÏùÑ ÏúÑÌï¥ margin: auto Ï†úÍ±∞ */
                box-shadow: 0 20px 60px rgba(30, 144, 255, 0.2);
            }
            
            .search-icon {
                position: absolute;
                color: rgba(30, 144, 255, 0.6);
                font-size: 20px;
                animation: float-search 6s ease-in-out infinite;
            }
            
            .search1 {
                top: 20px;
                left: 10%;
                animation-delay: 0s;
            }
            
            .search2 {
                top: 30px;
                right: 15%;
                animation-delay: -2s;
            }
            
            .search3 {
                bottom: 40px;
                left: 20%;
                animation-delay: -4s;
            }
            
            @keyframes float-search {
                0%, 100% { 
                    transform: translateY(0px) rotate(0deg); 
                    opacity: 0.6; 
                }
                33% { 
                    transform: translateY(-10px) rotate(5deg); 
                    opacity: 1; 
                }
                66% { 
                    transform: translateY(5px) rotate(-3deg); 
                    opacity: 0.8; 
                }
            }
            
            .title {
                text-align: center; /* Ï§ëÏïôÏ†ïÎ†¨ÏóêÏÑú Ï¢åÏ∏°Ï†ïÎ†¨Î°ú Î≥ÄÍ≤Ω */
                color: #1e3a8a;
                font-size: 24px;
                font-weight: 500;
                margin-bottom: 50px;
                font-family: 'Arial', sans-serif;
                letter-spacing: 1px;
            }
            
            .web-journey-path {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 40px;
                position: relative;
                flex-wrap: wrap;
            }
            
            .web-step-circle {
                width: 85px;
                height: 85px;
                background: rgba(255, 255, 255, 0.95);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 30px;
                box-shadow: 0 10px 30px rgba(30, 144, 255, 0.3);
                transition: all 0.4s ease;
                position: relative;
                animation: web-breathe 5s ease-in-out infinite;
                border: 3px solid rgba(30, 144, 255, 0.2);
            }
            
            .web-step-circle:nth-child(1) { animation-delay: 0s; }
            .web-step-circle:nth-child(3) { animation-delay: 1s; }
            .web-step-circle:nth-child(5) { animation-delay: 2s; }
            .web-step-circle:nth-child(7) { animation-delay: 3s; }
            
            @keyframes web-breathe {
                0%, 100% { 
                    transform: scale(1); 
                    box-shadow: 0 10px 30px rgba(30, 144, 255, 0.3); 
                }
                50% { 
                    transform: scale(1.08); 
                    box-shadow: 0 15px 40px rgba(30, 144, 255, 0.5); 
                }
            }
            
            .web-step-circle:hover {
                transform: scale(1.15) translateY(-8px);
                box-shadow: 0 20px 50px rgba(30, 144, 255, 0.6);
            }
            
            .web-step-label {
                position: absolute;
                bottom: -40px;
                left: 50%;
                transform: translateX(-50%);
                font-size: 13px;
                color: #1e3a8a;
                white-space: nowrap;
                font-weight: 400;
                letter-spacing: 0.5px;
            }
            
            .web-path-line {
                width: 35px;
                height: 3px;
                background: linear-gradient(90deg, #1e90ff, #4169e1);
                border-radius: 2px;
                position: relative;
                animation: web-flow 4s ease-in-out infinite;
            }
            
            @keyframes web-flow {
                0%, 100% { 
                    opacity: 0.7; 
                    transform: scaleX(1); 
                }
                50% { 
                    opacity: 1; 
                    transform: scaleX(1.1); 
                }
            }
            
            .web-path-line::before {
                content: '';
                position: absolute;
                right: -4px;
                top: -2px;
                width: 0;
                height: 0;
                border-left: 5px solid #1e90ff;
                border-top: 3px solid transparent;
                border-bottom: 3px solid transparent;
            }
            
            .web-subtitle {
                text-align: left; /* Ï§ëÏïôÏ†ïÎ†¨ÏóêÏÑú Ï¢åÏ∏°Ï†ïÎ†¨Î°ú Î≥ÄÍ≤Ω */
                margin-top: 70px;
                color: #4682b4;
                font-size: 15px;
                font-weight: 300;
                letter-spacing: 1px;
                font-style: italic;
            }
            
            .web-decoration {
                position: absolute;
                color: rgba(30, 144, 255, 0.5);
                font-size: 14px;
                animation: web-twinkle 4s ease-in-out infinite;
            }
            
            @keyframes web-twinkle {
                0%, 100% { 
                    opacity: 0.3; 
                    transform: scale(0.9); 
                }
                50% { 
                    opacity: 1; 
                    transform: scale(1.3); 
                }
            }
            
            .web-deco1 { top: 50px; left: 8%; animation-delay: 0s; }
            .web-deco2 { top: 90px; right: 10%; animation-delay: 2s; }
            .web-deco3 { bottom: 60px; left: 15%; animation-delay: 4s; }
            
            @media (max-width: 1024px) {
                .web-search-container {
                    max-width: 950px;
                }
                
                .web-journey-path {
                    gap: 25px;
                }
                
                .web-step-circle {
                    width: 70px;
                    height: 70px;
                    font-size: 24px;
                }
                
                .web-path-line {
                    width: 20px;
                }
            }
            
            @media (max-width: 768px) {
                .web-journey-path {
                    flex-direction: column;
                    gap: 30px;
                    align-items: flex-start; /* Î™®Î∞îÏùºÏóêÏÑúÎèÑ Ï¢åÏ∏°Ï†ïÎ†¨ */
                }
                
                .web-path-line {
                    width: 3px;
                    height: 30px;
                    transform: rotate(90deg);
                }
                
                .web-path-line::before {
                    right: -2px;
                    top: -4px;
                    border-left: 3px solid transparent;
                    border-right: 3px solid transparent;
                    border-top: 5px solid #1e90ff;
                }
                
                .web-search-container {
                    padding: 40px 20px;
                    min-height: 700px;
                    margin: 20px 0;
                }
                
                .title {
                    font-size: 20px;
                }
                
                .web-step-circle {
                    width: 75px;
                    height: 75px;
                    font-size: 26px;
                }
            }

        </style>
        <div class="web-search-container">
            <div class="search-icon search1">ü§î</div>
            <div class="search-icon search2">üéØ</div>
            <div class="search-icon search3">üí°</div>
            <div class="web-decoration web-deco1">‚ú¶</div>
            <div class="web-decoration web-deco2">‚úß</div>
            <div class="web-decoration web-deco3">‚ú¶</div>
            <div class="title">AIÎ•º ÌôúÏö©ÌïòÏó¨ Ïã†ÏÜçÌïú Ïû•Ïï†Î≥µÍµ¨Ïóê ÌôúÏö©Ìï¥Î≥¥ÏÑ∏Ïöî!</div>
            <div class="web-journey-path">
                <div class="web-step-circle">
                    ü§î
                    <div class="web-step-label"><b>Î≥µÍµ¨Î∞©Î≤ï</b></div>
                </div>
                <div class="web-path-line"></div>
                <div class="web-step-circle">
                    üéØ
                    <div class="web-step-label"><b>Ïû•Ïï†ÏõêÏù∏</b></div>
                </div>
                <div class="web-path-line"></div>
                <div class="web-step-circle">
                    üí°
                    <div class="web-step-label"><b>Ïû•Ïï†ÌòÑÏÉÅ</b></div>
                </div>
                <div class="web-path-line"></div>
                <div class="web-step-circle">
                    ‚öñÔ∏è
                    <div class="web-step-label"><b>Ïù¥Î†•Ï°∞Ìöå</b></div>
                </div>
            </div>
        </div>
        <div style="text-align: left;"> <!-- ÏßàÎ¨∏ÏòàÏãú Î∂ÄÎ∂ÑÎèÑ Ï¢åÏ∏°Ï†ïÎ†¨ -->
        <h4>üí¨ ÏßàÎ¨∏ÏòàÏãú</h4>
        <h6>* Î≥µÍµ¨Î∞©Î≤ï : ÎßàÏù¥ÌéòÏù¥ÏßÄ Î≥¥ÌóòÍ∞ÄÏûÖÎ∂àÍ∞Ä ÌòÑÏÉÅ Î≥µÍµ¨Î∞©Î≤ï ÏïåÎ†§Ï§ò<br>
        * Ïû•Ïï†ÏõêÏù∏ : ERP EPÏóÖÎ¨¥ Ï≤òÎ¶¨Ïãú Í∞ÑÌóêÏ†Å Ï†ëÏÜçÎ∂àÍ∞ÄÌòÑÏÉÅÏóê ÎåÄÌïú Ïû•Ïï†ÏõêÏù∏Ïù¥ Î≠êÏïº?<br>
        * Ïú†ÏÇ¨ÏÇ¨Î°Ä : Î¨∏ÏûêÎ∞úÏÜ° Ïã§Ìå® ÌòÑÏÉÅÏóê ÎåÄÌïú Ï°∞ÏπòÎ∞©Î≤ï ÏïåÎ†§Ï§ò<br>
        * Ïû•Ïï†Ïù¥Î†• : Î∏îÎ°ùÏ≤¥Ïù∏Í∏∞Î∞òÏßÄÏó≠ÌôîÌèê ÏïºÍ∞ÑÏóê Î∞úÏÉùÌïú Ïû•Ïï†ÎÇ¥Ïó≠ ÏïåÎ†§Ï§ò<br>
        * Ïû•Ïï†Í±¥Ïàò : 2025ÎÖÑ ERP Ïû•Ïï†Í∞Ä Î™áÍ±¥Ïù¥Ïïº?<br>
        * Ï∞®Ìä∏Î∂ÑÏÑù : ERP ÎÖÑÎèÑÎ≥Ñ Ïû•Ïï†Í±¥Ïàò Ï∞®Ìä∏Î°ú Í∑∏Î†§Ï§ò    ‚Äª Ï†úÍ≥µÍ∞ÄÎä•: Í∞ÄÎ°ú/ÏÑ∏Î°ú ÎßâÎåÄÏ∞®Ìä∏, ÏÑ† Ï∞®Ìä∏, ÌååÏù¥ Ï∞®Ìä∏<p>

        <font color="red"> ‚Äª ÏÑúÎπÑÏä§Î™ÖÏùÑ Ï†ïÌôïÌûà ÏûÖÎ†•ÌïòÏãúÍ≥† Í∞ôÏù¥ Í≤ÄÏÉâÌïòÏãúÎ©¥ Î≥¥Îã§ Îçî Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§<br>
        ‚Äª ÎåÄÎüâÏ°∞ÌöåÍ∞Ä ÏïàÎêòÎèÑÎ°ù ÏûÑÍ≥ÑÏπò ÏÑ§Ï†ï Î∞è ÏùºÎ∂Ä Ïù∏ÏãúÎçòÌä∏Îäî ÌïôÏäµÎç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï†úÏô∏ÎêòÏñ¥ ÌÜµÍ≥ÑÏÑ± ÏßàÎ¨∏ÏùÄ ÏùºÎ∂Ä Î∂ÄÏ†ïÌôï Ìï† ÏàòÏûàÎã§Îäî Ï†ê ÏñëÌï¥ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.<br>
        </font>
        </h6>
        </div>
        </div>
        """
        
        st.markdown(html_code, unsafe_allow_html=True)
    
    def show_config_error(self, env_status):
        """ÏÑ§Ï†ï Ïò§Î•ò ÌëúÏãú"""
        st.error("ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
        st.info("""
        **ÏÑ§Ï†ïÌï¥Ïïº Ìï† ÌôòÍ≤ΩÎ≥ÄÏàò:**
        - OPENAI_ENDPOINT: Azure OpenAI ÏóîÎìúÌè¨Ïù∏Ìä∏ URL
        - OPENAI_KEY: Azure OpenAI API ÌÇ§
        - SEARCH_ENDPOINT: Azure AI Search ÏóîÎìúÌè¨Ïù∏Ìä∏ URL  
        - SEARCH_API_KEY: Azure AI Search API ÌÇ§
        - INDEX_REBUILD_NAME: Í≤ÄÏÉâÌï† Ïù∏Îç±Ïä§Î™Ö

        **.env ÌååÏùº ÏòàÏãú:**
        ```
        OPENAI_ENDPOINT=https://your-openai-resource.openai.azure.com/
        OPENAI_KEY=your-openai-api-key
        OPENAI_API_VERSION=2024-02-01
        CHAT_MODEL=iap-gpt-4o-mini
        SEARCH_ENDPOINT=https://your-search-service.search.windows.net
        SEARCH_API_KEY=your-search-api-key
        INDEX_REBUILD_NAME=your-index-name
        ```
        """)
        
        st.write("**ÌôòÍ≤ΩÎ≥ÄÏàò ÏÉÅÌÉú:**")
        for var, status in env_status.items():
            st.write(f"{status} {var}")
    
    def show_connection_error(self):
        """Ïó∞Í≤∞ Ïò§Î•ò ÌëúÏãú"""
        st.error("Azure ÏÑúÎπÑÏä§ Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
        st.info("""
        **ÌïÑÏöîÌïú ÌôòÍ≤ΩÎ≥ÄÏàò:**
        - OPENAI_ENDPOINT: Azure OpenAI ÏóîÎìúÌè¨Ïù∏Ìä∏
        - OPENAI_KEY: Azure OpenAI API ÌÇ§
        - OPENAI_API_VERSION: API Î≤ÑÏ†Ñ (Í∏∞Î≥∏Í∞í: 2024-02-01)
        - CHAT_MODEL: Î™®Îç∏Î™Ö (Í∏∞Î≥∏Í∞í: iap-gpt-4o-mini)
        - SEARCH_ENDPOINT: Azure AI Search ÏóîÎìúÌè¨Ïù∏Ìä∏
        - SEARCH_API_KEY: Azure AI Search API ÌÇ§
        - INDEX_REBUILD_NAME: Í≤ÄÏÉâ Ïù∏Îç±Ïä§Î™Ö
        """)
    
    def display_chat_messages(self):
        """Ï±ÑÌåÖ Î©îÏãúÏßÄ ÌëúÏãú"""
        chat_container = st.container()
        
        with chat_container:
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    if message["role"] == "assistant":
                        content = message["content"]
                        
                        converted_content = content
                        html_converted = False
                        
                        if '[REPAIR_BOX_START]' in converted_content and '[REPAIR_BOX_END]' in converted_content:
                            converted_content, has_repair_html = self.convert_repair_box_to_html(converted_content)
                            if has_repair_html:
                                html_converted = True
                        
                        if '[CAUSE_BOX_START]' in converted_content and '[CAUSE_BOX_END]' in converted_content:
                            converted_content, has_cause_html = self.convert_cause_box_to_html(converted_content)
                            if has_cause_html:
                                html_converted = True
                        
                        if html_converted or ('<div style=' in content and ('Ïû•Ïï†ÏõêÏù∏' in content or 'Î≥µÍµ¨Î∞©Î≤ï' in content)):
                            st.markdown(converted_content, unsafe_allow_html=True)
                        else:
                            st.write(converted_content)
                    else:
                        st.write(message["content"])
    
    # ÎÇòÎ®∏ÏßÄ Î©îÏÑúÎìúÎì§ÏùÄ Í∏∞Ï°¥ ÏΩîÎìúÏôÄ ÎèôÏùºÌïòÎØÄÎ°ú ÏÉùÎûµ...
    
    def display_documents_with_quality_info(self, documents):
        """ÌíàÏßà Ï†ïÎ≥¥ÏôÄ Ï≤òÎ¶¨ Î∞©Ïãù Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú Î¨∏ÏÑú ÌëúÏãú"""
        for i, doc in enumerate(documents):
            quality_tier = doc.get('quality_tier', 'Standard')
            filter_reason = doc.get('filter_reason', 'Í∏∞Î≥∏ ÏÑ†Î≥Ñ')
            service_match_type = doc.get('service_match_type', 'unknown')
            search_score = doc.get('score', 0)
            reranker_score = doc.get('reranker_score', 0)
            final_score = doc.get('final_score', 0)
            relevance_score = doc.get('relevance_score', None)
            keyword_relevance = doc.get('keyword_relevance_score', None)
            semantic_similarity = doc.get('semantic_similarity', None)
            
            daynight = doc.get('daynight', '')
            week = doc.get('week', '')
            
            if quality_tier == 'Premium':
                tier_emoji = "üÜî"
                tier_color = "üü¢"
            elif quality_tier == 'Standard':
                tier_emoji = "üéØ"
                tier_color = "üü°"
            else:
                tier_emoji = "üìã"
                tier_color = "üîµ"
            
            match_emoji = {"exact": "üéØ", "partial": "üîç", "all": "üìã", "fallback": "üîÑ"}.get(service_match_type, "‚ùì")
            match_label = {
                "exact": "Ï†ïÌôï Îß§Ïπ≠", 
                "partial": "Ìè¨Ìï® Îß§Ïπ≠", 
                "all": "Ï†ÑÏ≤¥", 
                "fallback": "ÎåÄÏ≤¥ Í≤ÄÏÉâ",
                "unknown": "Ïïå Ïàò ÏóÜÏùå"
            }.get(service_match_type, "Ïïå Ïàò ÏóÜÏùå")
            
            time_info = ""
            if daynight:
                time_emoji = "üåû" if daynight == "Ï£ºÍ∞Ñ" else "üåô"
                time_info += f" {time_emoji} {daynight}"
            if week:
                time_info += f" üìÖ {week}ÏöîÏùº" if week not in ['ÌèâÏùº', 'Ï£ºÎßê'] else f" üìÖ {week}"
            
            if self.debug_mode:
                st.markdown(f"### {tier_emoji} **Î¨∏ÏÑú {i+1}** - {quality_tier}Í∏â {tier_color} {match_emoji} {match_label}{time_info}")
                st.markdown(f"**ÏÑ†Î≥Ñ Í∏∞Ï§Ä**: {filter_reason}")
                
                score_cols = st.columns(4 if relevance_score or keyword_relevance or semantic_similarity else 3)
                
                with score_cols[0]:
                    st.metric("Í≤ÄÏÉâ Ï†êÏàò", f"{search_score:.2f}")
                with score_cols[1]:
                    if reranker_score > 0:
                        st.metric("Reranker Ï†êÏàò", f"{reranker_score:.2f}")
                    else:
                        st.metric("Reranker Ï†êÏàò", "N/A")
                with score_cols[2]:
                    st.metric("ÏµúÏ¢Ö Ï†êÏàò", f"{final_score:.2f}")
                
                if len(score_cols) > 3:
                    with score_cols[3]:
                        if relevance_score is not None:
                            st.metric("Í¥ÄÎ†®ÏÑ± Ï†êÏàò", f"{relevance_score}Ï†ê")
                        elif keyword_relevance is not None:
                            st.metric("ÌÇ§ÏõåÎìú Ï†êÏàò", f"{keyword_relevance}Ï†ê")
                        elif semantic_similarity is not None:
                            st.metric("ÏùòÎØ∏ Ïú†ÏÇ¨ÏÑ±", f"{semantic_similarity:.2f}")
                        else:
                            st.metric("Ï∂îÍ∞Ä Î©îÌä∏Î¶≠", "N/A")
                
                if any([relevance_score, keyword_relevance, semantic_similarity]):
                    with st.expander("ÏÉÅÏÑ∏ Ï†êÏàò Î∂ÑÏÑù"):
                        if relevance_score is not None:
                            st.write(f"**LLM Í¥ÄÎ†®ÏÑ± Ï†êÏàò**: {relevance_score}Ï†ê (70Ï†ê Ïù¥ÏÉÅ ÌÜµÍ≥º)")
                            validation_reason = doc.get('validation_reason', 'Í≤ÄÏ¶ùÎê®')
                            st.write(f"**Í≤ÄÏ¶ù ÏÇ¨Ïú†**: {validation_reason}")
                        
                        if keyword_relevance is not None:
                            st.write(f"**ÌÇ§ÏõåÎìú Í¥ÄÎ†®ÏÑ± Ï†êÏàò**: {keyword_relevance}Ï†ê (30Ï†ê Ïù¥ÏÉÅ Í¥ÄÎ†®)")
                        
                        if semantic_similarity is not None:
                            st.write(f"**ÏùòÎØ∏Ï†Å Ïú†ÏÇ¨ÏÑ±**: {semantic_similarity:.2f} (0.3 Ïù¥ÏÉÅ Ïú†ÏÇ¨)")
            else:
                st.markdown(f"### {tier_emoji} **Î¨∏ÏÑú {i+1}**{time_info}")
            
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Ïû•Ïï† ID**: {doc['incident_id']}")
                st.write(f"**ÏÑúÎπÑÏä§Î™Ö**: {doc['service_name']}")
                st.write(f"**Î∞úÏÉùÏùºÏûê**: {doc['error_date']}")
                if daynight:
                    st.write(f"**Î∞úÏÉùÏãúÍ∞ÑÎåÄ**: {daynight}")
                if week:
                    st.write(f"**Î∞úÏÉùÏöîÏùº**: {week}")
                st.write(f"**Ïû•Ïï†ÏãúÍ∞Ñ**: {doc['error_time']}Î∂Ñ")
                st.write(f"**ÏòÅÌñ•ÎèÑ**: {doc['effect']}")

            with col2:
                st.write(f"**ÌòÑÏÉÅ**: {doc['symptom']}")
                st.write(f"**Ïû•Ïï†Îì±Í∏â**: {doc['incident_grade']}")
                st.write(f"**Ïû•Ïï†ÏõêÏù∏**: {doc['root_cause']}")
                st.write(f"**ÏõêÏù∏Ïú†Ìòï**: {doc['cause_type']}")
                st.write(f"**Ï≤òÎ¶¨Ïú†Ìòï**: {doc['done_type']}")
                st.write(f"**Îã¥ÎãπÎ∂ÄÏÑú**: {doc['owner_depart']}")
            
            incident_repair = doc.get('incident_repair', '').strip()
            incident_plan = doc.get('incident_plan', '').strip()
            
            if incident_repair:
                st.write("**Î≥µÍµ¨Î∞©Î≤ï (incident_repair)**:")
                if incident_plan and incident_plan in incident_repair:
                    clean_repair = incident_repair.replace(incident_plan, '').strip()
                    if clean_repair:
                        st.write(f"  {clean_repair[:300]}...")
                    else:
                        st.write(f"  {incident_repair[:300]}...")
                else:
                    st.write(f"  {incident_repair[:300]}...")
            
            if incident_plan:
                st.write("**Í∞úÏÑ†Í≥ÑÌöç (incident_plan) - Ï∞∏Í≥†Ïö©**:")
                st.write(f"  {incident_plan[:300]}...")
            
            if doc.get('repair_notice'):
                st.write(f"**Î≥µÍµ¨Í≥µÏßÄ**: {doc['repair_notice'][:200]}...")
            
            st.markdown("---")
    
    def display_processing_mode_info(self, query_type, processing_mode):
        """Ï≤òÎ¶¨ Î™®Îìú Ï†ïÎ≥¥ ÌëúÏãú"""
        if not self.debug_mode:
            return
            
        mode_info = {
            'accuracy_first': {
                'name': 'Ï†ïÌôïÏÑ± Ïö∞ÏÑ†',
                'color': '#ff6b6b',
                'icon': 'üéØ',
                'description': 'LLM Í¥ÄÎ†®ÏÑ± Í≤ÄÏ¶ùÏùÑ ÌÜµÌïú ÏµúÍ≥† Ï†ïÌôïÎèÑ Ï†úÍ≥µ'
            },
            'coverage_first': {
                'name': 'Ìè¨Í¥ÑÏÑ± Ïö∞ÏÑ†',
                'color': '#4ecdc4',
                'icon': 'üìã',
                'description': 'ÏùòÎØ∏Ï†Å Ïú†ÏÇ¨ÏÑ± Í∏∞Î∞ò Í¥ëÎ≤îÏúÑÌïú Í≤ÄÏÉâ Í≤∞Í≥º Ï†úÍ≥µ'
            },
            'balanced': {
                'name': 'Í∑†Ìòï Ï≤òÎ¶¨',
                'color': '#45b7d1',
                'icon': '‚öñÔ∏è',
                'description': 'Ï†ïÌôïÏÑ±Í≥º Ìè¨Í¥ÑÏÑ±Ïùò ÏµúÏ†Å Í∑†Ìòï'
            }
        }
        
        info = mode_info.get(processing_mode, mode_info['balanced'])
        
        st.markdown(f"""
        <div style="
            background-color: {info['color']}15;
            border-left: 4px solid {info['color']};
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        ">
            <strong>{info['icon']} {info['name']} ({query_type.upper()})</strong><br>
            <small>{info['description']}</small>
        </div>
        """, unsafe_allow_html=True)
    
    def display_performance_metrics(self, metrics):
        """ÏÑ±Îä• Î©îÌä∏Î¶≠ ÌëúÏãú"""
        if not metrics or not self.debug_mode:
            return
        
        with st.expander("Ï≤òÎ¶¨ ÏÑ±Îä• Î©îÌä∏Î¶≠"):
            cols = st.columns(len(metrics))
            for i, (metric_name, value) in enumerate(metrics.items()):
                with cols[i]:
                    st.metric(metric_name.replace('_', ' ').title(), value)
    
    def show_query_optimization_tips(self, query_type):
        """ÏøºÎ¶¨ ÌÉÄÏûÖÎ≥Ñ ÏµúÏ†ÅÌôî ÌåÅ ÌëúÏãú"""
        tips = {
            'repair': [
                "ÏÑúÎπÑÏä§Î™ÖÍ≥º Ïû•Ïï†ÌòÑÏÉÅÏùÑ Î™®Îëê Ìè¨Ìï®ÌïòÏÑ∏Ïöî",
                "Íµ¨Ï≤¥Ï†ÅÏù∏ Ïò§Î•ò Ï¶ùÏÉÅÏùÑ Î™ÖÏãúÌïòÏÑ∏Ïöî",
                "'Î≥µÍµ¨Î∞©Î≤ï', 'Ìï¥Í≤∞Î∞©Î≤ï' ÌÇ§ÏõåÎìúÎ•º Ìè¨Ìï®ÌïòÏÑ∏Ïöî",
                "ÏãúÍ∞ÑÎåÄÎÇò ÏöîÏùºÏùÑ Î™ÖÏãúÌïòÎ©¥ Îçî Ï†ïÌôïÌïú Í≤∞Í≥ºÎ•º ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§",
                "‚Äª Î≥µÍµ¨Î∞©Î≤ïÏùÄ incident_repair ÌïÑÎìú Í∏∞Ï§ÄÏúºÎ°úÎßå Ï†úÍ≥µÎê©ÎãàÎã§"
            ],
            'cause': [
                "Ïû•Ïï† ÌòÑÏÉÅÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌïòÏÑ∏Ïöî",
                "'ÏõêÏù∏', 'Ïù¥Ïú†', 'Ïôú' Îì±Ïùò ÌÇ§ÏõåÎìúÎ•º Ìè¨Ìï®ÌïòÏÑ∏Ïöî",
                "Î∞úÏÉù ÏãúÏ†êÏù¥ÎÇò Ï°∞Í±¥ÏùÑ Î™ÖÏãúÌïòÏÑ∏Ïöî",
                "ÏãúÍ∞ÑÎåÄ(Ï£ºÍ∞Ñ/ÏïºÍ∞Ñ)ÎÇò ÏöîÏùºÏùÑ ÏßÄÏ†ïÌïòÎ©¥ Îçî Ï†ïÌôïÌïú Î∂ÑÏÑùÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§"
            ],
            'similar': [
                "ÌïµÏã¨ Ïû•Ïï† ÌòÑÏÉÅÎßå Í∞ÑÍ≤∞ÌïòÍ≤å Í∏∞Ïà†ÌïòÏÑ∏Ïöî",
                "'Ïú†ÏÇ¨', 'ÎπÑÏä∑Ìïú', 'ÎèôÏùºÌïú' ÌÇ§ÏõåÎìúÎ•º Ìè¨Ìï®ÌïòÏÑ∏Ïöî",
                "ÏÑúÎπÑÏä§Î™ÖÏù¥ Î∂àÌôïÏã§Ìï† Îïå Ïú†Ïö©Ìï©ÎãàÎã§",
                "ÌäπÏ†ï ÏãúÍ∞ÑÎåÄÎÇò ÏöîÏùºÏóê Î∞úÏÉùÌïú Ïú†ÏÇ¨ ÏÇ¨Î°ÄÎèÑ Í≤ÄÏÉâ Í∞ÄÎä•Ìï©ÎãàÎã§"
            ],
            'default': [
                "ÌÜµÍ≥ÑÎÇò ÌòÑÌô© Ï°∞Ìöå Ïãú Í∏∞Í∞ÑÏùÑ Î™ÖÏãúÌïòÏÑ∏Ïöî",
                "Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÑúÎπÑÏä§Î™ÖÏù¥ÎÇò Ï°∞Í±¥ÏùÑ Ìè¨Ìï®ÌïòÏÑ∏Ïöî",
                "'Í±¥Ïàò', 'ÌÜµÍ≥Ñ', 'ÌòÑÌô©' Îì±Ïùò ÌÇ§ÏõåÎìúÎ•º ÌôúÏö©ÌïòÏÑ∏Ïöî",
                "ÏãúÍ∞ÑÎåÄÎ≥Ñ(Ï£ºÍ∞Ñ/ÏïºÍ∞Ñ) ÎòêÎäî ÏöîÏùºÎ≥Ñ ÏßëÍ≥ÑÎèÑ Í∞ÄÎä•Ìï©ÎãàÎã§",
                "ÌÜµÍ≥ÑÏÑ± ÏßàÎ¨∏ Ïãú ÏûêÎèôÏúºÎ°ú Ï∞®Ìä∏Í∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§"
            ]
        }
        
        query_tips = tips.get(query_type, tips['default'])
        
        with st.expander(f"{query_type.upper()} ÏøºÎ¶¨ ÏµúÏ†ÅÌôî ÌåÅ"):
            for tip in query_tips:
                st.write(f"‚Ä¢ {tip}")
            
            st.write("\n**ÏãúÍ∞Ñ Í¥ÄÎ†® ÏßàÎ¨∏ ÏòàÏãú:**")
            time_examples = [
                "ÏïºÍ∞ÑÏóê Î∞úÏÉùÌïú ERP Ïû•Ïï† ÌòÑÌô©",
                "ÏõîÏöîÏùºÏóê Î∞úÏÉùÌïú API Ïò§Î•ò Î™áÍ±¥?",
                "Ï£ºÍ∞ÑÏóê Î∞úÏÉùÌïú Î≥¥ÌóòÍ∞ÄÏûÖ Ïã§Ìå® Î≥µÍµ¨Î∞©Î≤ï",
                "Ï£ºÎßê SMS Î∞úÏÜ° Ïû•Ïï† ÏõêÏù∏ Î∂ÑÏÑù"
            ]
            for example in time_examples:
                st.write(f"  - {example}")
            
            if query_type == 'default':
                st.write("\n**üìä ÏûêÎèô Ï∞®Ìä∏ ÏÉùÏÑ± ÏòàÏãú:**")
                chart_examples = [
                    "2024ÎÖÑ Ïó∞ÎèÑÎ≥Ñ Ïû•Ïï† ÌÜµÍ≥Ñ ‚Üí Ïó∞ÎèÑÎ≥Ñ ÏÑ† Í∑∏ÎûòÌîÑ",
                    "Î∂ÄÏÑúÎ≥Ñ Ïû•Ïï† Ï≤òÎ¶¨ ÌòÑÌô© ‚Üí Î∂ÄÏÑúÎ≥Ñ Í∞ÄÎ°ú ÎßâÎåÄ Í∑∏ÎûòÌîÑ", 
                    "ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïû•Ïï† Î∞úÏÉù Î∂ÑÌè¨ ‚Üí ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÑ∏Î°ú ÎßâÎåÄ Í∑∏ÎûòÌîÑ",
                    "Ïû•Ïï†Îì±Í∏âÎ≥Ñ Î∞úÏÉù ÎπÑÏú® ‚Üí Îì±Í∏âÎ≥Ñ ÏõêÌòï Í∑∏ÎûòÌîÑ",
                    "ÏõîÎ≥Ñ Ïû•Ïï† Î∞úÏÉù Ï∂îÏù¥ ‚Üí ÏõîÎ≥Ñ ÏÑ† Í∑∏ÎûòÌîÑ"
                ]
                for example in chart_examples:
                    st.write(f"  - {example}")
            
            if query_type == 'repair':
                st.write("\n**Î≥µÍµ¨Î∞©Î≤ï Í¥ÄÎ†® Ï§ëÏöî ÏïàÎÇ¥:**")
                st.write("‚Ä¢ Î≥µÍµ¨Î∞©Î≤ïÏùÄ incident_repair ÌïÑÎìú Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©Îê©ÎãàÎã§")
                st.write("‚Ä¢ Í∞úÏÑ†Í≥ÑÌöç(incident_plan)ÏùÄ Î≥ÑÎèÑ Ï∞∏Í≥†Ïö©ÏúºÎ°ú Ï†úÍ≥µÎê©ÎãàÎã§")
                st.write("‚Ä¢ Îëê Ï†ïÎ≥¥Îäî Î™ÖÌôïÌûà Íµ¨Î∂ÑÎêòÏñ¥ ÌëúÏãúÎê©ÎãàÎã§")
    
    def display_time_filter_info(self, time_conditions):
        """ÏãúÍ∞Ñ Ï°∞Í±¥ ÌïÑÌÑ∞ÎßÅ Ï†ïÎ≥¥ ÌëúÏãú"""
        if not time_conditions or not time_conditions.get('is_time_query') or not self.debug_mode:
            return
        
        time_desc = []
        if time_conditions.get('daynight'):
            time_emoji = "üåû" if time_conditions['daynight'] == "Ï£ºÍ∞Ñ" else "üåô"
            time_desc.append(f"{time_emoji} ÏãúÍ∞ÑÎåÄ: {time_conditions['daynight']}")
        
        if time_conditions.get('week'):
            week_emoji = "üìÖ"
            week_desc = f"{time_conditions['week']}"
            if time_conditions['week'] not in ['ÌèâÏùº', 'Ï£ºÎßê']:
                week_desc += "ÏöîÏùº"
            time_desc.append(f"{week_emoji} {week_desc}")
        
        if time_desc:
            st.info(f"‚è∞ ÏãúÍ∞Ñ Ï°∞Í±¥ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©: {', '.join(time_desc)}")
    
    def display_validation_results(self, validation_result):
        """ÏøºÎ¶¨ Ï≤òÎ¶¨ Í≤ÄÏ¶ù Í≤∞Í≥º ÌëúÏãú"""
        if not validation_result or not self.debug_mode:
            return
        
        if not validation_result['is_valid']:
            st.warning("Ï≤òÎ¶¨ Í≤∞Í≥ºÏóê Ï£ºÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏäµÎãàÎã§.")
        
        if validation_result['warnings']:
            with st.expander("Í≤ΩÍ≥†ÏÇ¨Ìï≠"):
                for warning in validation_result['warnings']:
                    st.warning(warning)
        
        if validation_result['recommendations']:
            with st.expander("Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠"):
                for recommendation in validation_result['recommendations']:
                    st.info(recommendation)
    
    def show_time_statistics(self, documents):
        """ÏãúÍ∞ÑÎåÄ/ÏöîÏùºÎ≥Ñ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÌëúÏãú"""
        if not documents:
            return
        
        daynight_stats = {}
        week_stats = {}
        
        for doc in documents:
            daynight = doc.get('daynight', '')
            week = doc.get('week', '')
            
            if daynight:
                daynight_stats[daynight] = daynight_stats.get(daynight, 0) + 1
            
            if week:
                week_stats[week] = week_stats.get(week, 0) + 1
        
        if daynight_stats or week_stats:
            with st.expander("ÏãúÍ∞ÑÎ≥Ñ ÌÜµÍ≥Ñ Ï†ïÎ≥¥"):
                col1, col2 = st.columns(2)
                
                with col1:
                    if daynight_stats:
                        st.write("**ÏãúÍ∞ÑÎåÄÎ≥Ñ Î∂ÑÌè¨:**")
                        for time_period, count in sorted(daynight_stats.items()):
                            time_emoji = "üåû" if time_period == "Ï£ºÍ∞Ñ" else "üåô"
                            st.write(f"  {time_emoji} {time_period}: {count}Í±¥")
                
                with col2:
                    if week_stats:
                        st.write("**ÏöîÏùºÎ≥Ñ Î∂ÑÌè¨:**")
                        week_order = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº', 'ÌèâÏùº', 'Ï£ºÎßê']
                        sorted_weeks = sorted(week_stats.items(), 
                                            key=lambda x: week_order.index(x[0]) if x[0] in week_order else 999)
                        
                        for week_day, count in sorted_weeks:
                            week_desc = f"{week_day}ÏöîÏùº" if week_day not in ['ÌèâÏùº', 'Ï£ºÎßê'] else week_day
                            st.write(f"  üìÖ {week_desc}: {count}Í±¥")
    
    def show_department_statistics(self, documents):
        """Î∂ÄÏÑúÎ≥Ñ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÌëúÏãú"""
        if not documents:
            return
        
        department_stats = {}
        
        for doc in documents:
            owner_depart = doc.get('owner_depart', '')
            
            if owner_depart:
                department_stats[owner_depart] = department_stats.get(owner_depart, 0) + 1
        
        if department_stats:
            with st.expander("Î∂ÄÏÑúÎ≥Ñ ÌÜµÍ≥Ñ Ï†ïÎ≥¥"):
                st.write("**Îã¥ÎãπÎ∂ÄÏÑúÎ≥Ñ Î∂ÑÌè¨:**")
                sorted_departments = sorted(department_stats.items(), 
                                          key=lambda x: x[1], reverse=True)
                
                for department, count in sorted_departments:
                    st.write(f"  üè¢ {department}: {count}Í±¥")
    
    def show_comprehensive_statistics(self, documents):
        """ÏãúÍ∞ÑÎåÄ/ÏöîÏùº/Î∂ÄÏÑúÎ≥Ñ Ï¢ÖÌï© ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÌëúÏãú"""
        if not documents:
            return
        
        daynight_stats = {}
        week_stats = {}
        department_stats = {}
        
        for doc in documents:
            daynight = doc.get('daynight', '')
            week = doc.get('week', '')
            owner_depart = doc.get('owner_depart', '')
            
            if daynight:
                daynight_stats[daynight] = daynight_stats.get(daynight, 0) + 1
            
            if week:
                week_stats[week] = week_stats.get(week, 0) + 1
            
            if owner_depart:
                department_stats[owner_depart] = department_stats.get(owner_depart, 0) + 1
        
        if daynight_stats or week_stats or department_stats:
            with st.expander("Ï¢ÖÌï© ÌÜµÍ≥Ñ Ï†ïÎ≥¥"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if daynight_stats:
                        st.write("**ÏãúÍ∞ÑÎåÄÎ≥Ñ Î∂ÑÌè¨:**")
                        for time_period, count in sorted(daynight_stats.items()):
                            time_emoji = "üåû" if time_period == "Ï£ºÍ∞Ñ" else "üåô"
                            st.write(f"  {time_emoji} {time_period}: {count}Í±¥")
                
                with col2:
                    if week_stats:
                        st.write("**ÏöîÏùºÎ≥Ñ Î∂ÑÌè¨:**")
                        week_order = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº', 'ÌèâÏùº', 'Ï£ºÎßê']
                        sorted_weeks = sorted(week_stats.items(), 
                                            key=lambda x: week_order.index(x[0]) if x[0] in week_order else 999)
                        
                        for week_day, count in sorted_weeks:
                            week_desc = f"{week_day}ÏöîÏùº" if week_day not in ['ÌèâÏùº', 'Ï£ºÎßê'] else week_day
                            st.write(f"  üìÖ {week_desc}: {count}Í±¥")
                
                with col3:
                    if department_stats:
                        st.write("**Îã¥ÎãπÎ∂ÄÏÑúÎ≥Ñ Î∂ÑÌè¨:**")
                        sorted_departments = sorted(department_stats.items(), 
                                                  key=lambda x: x[1], reverse=True)[:5]
                        
                        for department, count in sorted_departments:
                            st.write(f"  üè¢ {department}: {count}Í±¥")
    
    def show_repair_plan_distinction_info(self):
        """Î≥µÍµ¨Î∞©Î≤ïÍ≥º Í∞úÏÑ†Í≥ÑÌöç Íµ¨Î∂Ñ ÏïàÎÇ¥ Ï†ïÎ≥¥"""
        with st.expander("üìã Î≥µÍµ¨Î∞©Î≤ïÍ≥º Í∞úÏÑ†Í≥ÑÌöç Íµ¨Î∂Ñ ÏïàÎÇ¥"):
            st.markdown("""
            **üîß Î≥µÍµ¨Î∞©Î≤ï (incident_repair):**
            - Ïû•Ïï† Î∞úÏÉù Ïãú Ï¶âÏãú Ï†ÅÏö©Ìï† Ïàò ÏûàÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ Ï°∞Ïπò Î∞©Î≤ï
            - ÏãúÏä§ÌÖúÏùÑ Ï†ïÏÉÅ ÏÉÅÌÉúÎ°ú Î≥µÏõêÌïòÍ∏∞ ÏúÑÌïú Îã®Í≥ÑÎ≥Ñ Ï†àÏ∞®
            - Î≥µÍµ¨Î∞©Î≤ï ÏßàÎ¨∏Ïóê ÎåÄÌïú ÌïµÏã¨ ÎãµÎ≥ÄÏúºÎ°ú Ï†úÍ≥µ
            
            **üìà Í∞úÏÑ†Í≥ÑÌöç (incident_plan):**
            - Ïú†ÏÇ¨Ìïú Ïû•Ïï†Ïùò Ïû¨Î∞ú Î∞©ÏßÄÎ•º ÏúÑÌïú Ïû•Í∏∞Ï†Å Í∞úÏÑ† Î∞©Ïïà
            - ÏãúÏä§ÌÖú ÎòêÎäî ÌîÑÎ°úÏÑ∏Ïä§ Í∞úÏÑ†ÏùÑ ÏúÑÌïú Í≥ÑÌöç
            - Ï∞∏Í≥†Ïö©ÏúºÎ°úÎßå Î≥ÑÎèÑ Ï†úÍ≥µ
            
            **üí° Íµ¨Î∂Ñ Ïù¥Ïú†:**
            - Î≥µÍµ¨Î∞©Î≤ï ÏßàÎ¨∏ Ïãú Ï¶âÏãú ÌïÑÏöîÌïú Ï†ïÎ≥¥Îßå Î™ÖÌôïÌûà Ï†úÍ≥µ
            - Ïû•Í∏∞Ï†Å Í∞úÏÑ†ÏÇ¨Ìï≠Í≥º Ï¶âÏãú Î≥µÍµ¨ Ï°∞ÏπòÎ•º ÌòºÎèôÌïòÏßÄ ÏïäÎèÑÎ°ù Íµ¨Î∂Ñ
            - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÉÅÌô©Ïóê ÎßûÎäî Ï†ÅÏ†àÌïú Ï†ïÎ≥¥Î•º ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú ÌôúÏö© Í∞ÄÎä•
            
            **üéØ ÏÇ¨Ïö© Î∞©Î≤ï:**
            - Í∏¥Í∏â ÏÉÅÌô©: incident_repair ÌïÑÎìúÏùò Î≥µÍµ¨Î∞©Î≤ïÏùÑ Ïö∞ÏÑ† Ï∞∏Í≥†
            - Ïû•Í∏∞Ï†Å Í∞úÏÑ†: incident_plan ÌïÑÎìúÏùò Í∞úÏÑ†Í≥ÑÌöçÏùÑ Ï∂îÍ∞Ä Í≤ÄÌÜ†
            """)
    
    def show_chart_feature_info(self):
        """Ï∞®Ìä∏ Í∏∞Îä• ÏïàÎÇ¥ Ï†ïÎ≥¥"""
        with st.expander("üìä Ï∞®Ìä∏ ÏãúÍ∞ÅÌôî Í∏∞Îä• ÏïàÎÇ¥"):
            st.markdown("""
            **üöÄ ÏûêÎèô Ï∞®Ìä∏ ÏÉùÏÑ±:**
            - ÌÜµÍ≥ÑÏÑ± ÏßàÎ¨∏ Ïãú ÏûêÎèôÏúºÎ°ú Ï†ÅÏ†àÌïú Ï∞®Ìä∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§
            - ÌÖçÏä§Ìä∏ ÎãµÎ≥ÄÍ≥º Ìï®Íªò ÏãúÍ∞ÅÏ†Å Î∂ÑÏÑùÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§
            
            **üìà ÏßÄÏõêÎêòÎäî Ï∞®Ìä∏ ÌÉÄÏûÖ:**
            - **Ïó∞ÎèÑÎ≥Ñ/ÏõîÎ≥Ñ**: ÏÑ† Í∑∏ÎûòÌîÑÎ°ú ÏãúÍ∞Ñ Ï∂îÏù¥ ÌëúÏãú
            - **ÏãúÍ∞ÑÎåÄÎ≥Ñ/ÏöîÏùºÎ≥Ñ**: ÎßâÎåÄ Í∑∏ÎûòÌîÑÎ°ú Î∂ÑÌè¨ ÌëúÏãú  
            - **Î∂ÄÏÑúÎ≥Ñ/ÏÑúÎπÑÏä§Î≥Ñ**: Í∞ÄÎ°ú ÎßâÎåÄ Í∑∏ÎûòÌîÑÎ°ú ÏàúÏúÑ ÌëúÏãú
            - **Ïû•Ïï†Îì±Í∏âÎ≥Ñ**: ÏõêÌòï Í∑∏ÎûòÌîÑÎ°ú ÎπÑÏú® ÌëúÏãú
            - **ÏõêÏù∏Ïú†ÌòïÎ≥Ñ**: Í∞ÄÎ°ú ÎßâÎåÄ Í∑∏ÎûòÌîÑÎ°ú Î∂ÑÌè¨ ÌëúÏãú
            
            **üí° Ï∞®Ìä∏ ÏÉùÏÑ± Ï°∞Í±¥:**
            - ÌÜµÍ≥Ñ Í¥ÄÎ†® ÌÇ§ÏõåÎìú Ìè¨Ìï® (Í±¥Ïàò, ÌÜµÍ≥Ñ, ÌòÑÌô©, Î∂ÑÌè¨ Îì±)
            - Î∂ÑÎ•ò Í¥ÄÎ†® ÌÇ§ÏõåÎìú Ìè¨Ìï® (ÎÖÑÎèÑÎ≥Ñ, Î∂ÄÏÑúÎ≥Ñ, ÏÑúÎπÑÏä§Î≥Ñ Îì±)
            - Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä 2Í∞ú Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞
            
            **üìã Ï†úÍ≥µÎêòÎäî Ï∂îÍ∞Ä Ï†ïÎ≥¥:**
            - ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ ÌÖåÏù¥Î∏î
            - ÏöîÏïΩ ÌÜµÍ≥Ñ (Ï¥ù Í±¥Ïàò, ÌèâÍ∑†, ÏµúÎã§ Î∞úÏÉù)
            - Î∞±Î∂ÑÏú® Ï†ïÎ≥¥
            
            **üéØ Ï∞®Ìä∏ ÏÉùÏÑ± ÏòàÏãú ÏßàÎ¨∏:**
            - "2024ÎÖÑ Ïó∞ÎèÑÎ≥Ñ Ïû•Ïï† ÌÜµÍ≥Ñ"
            - "Î∂ÄÏÑúÎ≥Ñ Ïû•Ïï† Ï≤òÎ¶¨ ÌòÑÌô©"
            - "ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïû•Ïï† Î∞úÏÉù Î∂ÑÌè¨"
            - "ÏÑúÎπÑÏä§Î≥Ñ Ïû•Ïï† Í±¥Ïàò"
            - "Ïû•Ïï†Îì±Í∏âÎ≥Ñ Î∞úÏÉù ÎπÑÏú®"
            """)